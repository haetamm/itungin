generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

enum UserRoleEnum {
  ADMIN
}

model Role {
  id        String        @id @default(uuid())
  role      UserRoleEnum  @unique
  userRoles UserRole[]
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("roles")
}

model User {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(100)
  username  String      @unique @db.VarChar(100)
  password  String      @db.VarChar(100)
  token     String?
  imageUrl  String?     @map("image_url")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  userRoles UserRole[]

  @@map("users")
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id")
  roleId    String    @map("role_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  COGS 
  EXPENSE
  OTHER_EXPENSE
} 

enum EntryType {
  DEBIT
  CREDIT
}

enum PaymentType {
  CASH
  CREDIT
  MIXED
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
}

enum InventoryMethod {
  AVG
  FIFO
  LIFO
}

enum ReturnStatus {
  PENDING
  PROCESSED
}

enum PaymentMethod {
  CASH
  RETURN
}

model Account {
  accountId       String          @id @default(uuid()) @map("account_id")
  accountCode     String          @unique @db.VarChar(20) @map("account_code")
  accountName     String          @db.VarChar(100) @map("account_name")
  accountType     AccountType     @map("account_type")
  normalBalance   EntryType       @map("normal_balance")
  balance         Decimal         @default(0.00) @db.Decimal(15, 2)
  journalEntries  JournalEntry[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  deletedAt       DateTime?       @map("deleted_at")

  accountDefaultInventory         AccountDefault[] @relation("InventoryAccount")
  accountDefaultVatInput          AccountDefault[] @relation("VatInputAccount")
  accountDefaultCash              AccountDefault[] @relation("CashAccount")
  accountDefaultPayable           AccountDefault[] @relation("PayableAccount")
  accountDefaultOwnerCapital      AccountDefault[] @relation("OwnerCapitalAccount")

  accountDefaultSales              AccountDefault[] @relation("SalesAccount")
  accountDefaultVatOutput          AccountDefault[] @relation("VatOutputAccount")
  accountDefaultReceivable         AccountDefault[] @relation("ReceivableAccount")
  accountDefaultCostOfGoodsSold    AccountDefault[] @relation("CostOfGoodsSoldAccount")
  
  @@map("accounts")
}

model AccountDefault {
  id                        String    @id @default(uuid())
  inventoryAccountId        String
  vatInputAccountId         String
  cashAccountId             String
  payableAccountId          String
  ownerCapitalAccountId     String

  salesAccountId            String
  vatOutputAccountId        String
  receivableAccountId       String
  costOfGoodsSoldAccountId  String

  cashAccount               Account    @relation("CashAccount", fields: [cashAccountId], references: [accountId])
  inventoryAccount          Account    @relation("InventoryAccount", fields: [inventoryAccountId], references: [accountId])
  vatInputAccount           Account    @relation("VatInputAccount", fields: [vatInputAccountId], references: [accountId])
  payableAccount            Account    @relation("PayableAccount", fields: [payableAccountId], references: [accountId])
  ownerCapitalAccount       Account    @relation("OwnerCapitalAccount", fields: [ownerCapitalAccountId], references: [accountId])

  salesAccount              Account    @relation("SalesAccount", fields: [salesAccountId], references: [accountId])
  vatOutputAccount          Account    @relation("VatOutputAccount", fields: [vatOutputAccountId], references: [accountId])
  receivableAccount         Account    @relation("ReceivableAccount", fields: [receivableAccountId], references: [accountId])
  costOfGoodsSoldAccount    Account    @relation("CostOfGoodsSoldAccount", fields: [costOfGoodsSoldAccountId], references: [accountId])


  createdAt                 DateTime   @default(now()) @map("created_at")
  updatedAt                 DateTime   @updatedAt @map("updated_at")

  @@map("account_default")
}

model Journal {
  journalId         String          @id @default(uuid()) @map("journal_id")
  date              DateTime        @db.Date
  description       String?         @db.VarChar(255)
  reference         String?         @db.VarChar(50)
  paymentReference  String?         @db.VarChar(50)

  journalEntries    JournalEntry[]
  sales             Sale[]
  purchases         Purchase[]
  purchaseReturn    PurchaseReturn[]
  saleReturn        SaleReturn[]

  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("journals")
}

model JournalEntry {
  journalEntryId    String    @id @default(uuid()) @map("journal_entry_id")
  journalId         String    @map("journal_id")
  accountId         String    @map("account_id")
  debit             Decimal   @default(0.00) @db.Decimal(15, 2)
  credit            Decimal   @default(0.00) @db.Decimal(15, 2)
  journal           Journal   @relation(fields: [journalId], references: [journalId], onDelete: Cascade)
  account           Account   @relation(fields: [accountId], references: [accountId], onDelete: Restrict)
  payables          Payable[]
  receivables       Receivable[]
  payment           Payment?  @relation("PaymentJournalEntry")
  receivablePayment ReceivablePayment? @relation("ReceivablePaymentJournalEntry")

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("journal_entries")
}

model Supplier {
  supplierId        String      @id @default(uuid()) @map("supplier_id")
  supplierName      String      @db.VarChar(255) @map("supplier_name")
  phone             String?     @db.VarChar(20)
  email             String?     @db.VarChar(100)
  address           String?     @db.VarChar(100)

  purchases         Purchase[]
  payables          Payable[]
  purchaseReturns   PurchaseReturn[]

  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  deletedAt         DateTime?   @map("deleted_at")

  @@map("suppliers")
}

model Customer {
  customerId   String      @id @default(uuid()) @map("customer_id")
  customerName String      @db.VarChar(100) @map("customer_name")
  phone        String?     @db.VarChar(15)
  address      String?     @db.VarChar(100)

  sales        Sale[]
  receivables  Receivable[]
  saleReturns  SaleReturn[]

  
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  deletedAt    DateTime?   @map("deleted_at")

  @@map("customers")
}

model Product {
  productId             String           @id @default(uuid()) @map("product_id")
  productCode           String           @unique @db.VarChar(20) @map("product_code")
  productName           String           @db.VarChar(255) @map("product_name")
  category              String?          @db.VarChar(100)
  unit                  String           @db.VarChar(20) 
  avgPurchasePrice      Decimal          @db.Decimal(15, 2) @map("avg_purchase_price")
  profitMargin          Decimal          @db.Decimal(15, 2) @map("profit_margin")
  sellingPrice          Decimal          @db.Decimal(15, 2) @map("selling_price")
  stock                 Int

  inventoryBatches      InventoryBatch[]
  saleDetails           SaleDetail[]
  purchaseDetails       PurchaseDetail[]
  purchaseReturnDetails PurchaseReturnDetail[]
  saleReturnDetails     SaleReturnDetail[]

  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")
  deletedAt             DateTime?        @map("deleted_at")

  @@map("products")
}

model InventoryBatch {
  batchId                 String         @id @default(uuid()) @map("batch_id")
  productId               String         @map("product_id")
  purchaseDetailId        String         @unique @map("purchase_detail_id")
  purchaseDate            DateTime       @db.Date @map("purchase_date")
  quantity                Int
  purchasePrice           Decimal        @db.Decimal(15, 2) @map("purchase_price")
  remainingStock          Int            @map("remaining_stock")

  product                 Product        @relation(fields: [productId], references: [productId], onDelete: Cascade)
  purchaseDetail          PurchaseDetail @relation("PurchaseDetailToInventoryBatch", fields: [purchaseDetailId], references: [purchaseDetailId], onDelete: Cascade)
  saleDetails             SaleDetail[]
  purchaseReturnDetails   PurchaseReturnDetail[]
  saleReturnDetails       SaleReturnDetail[]

  createdAt               DateTime       @default(now()) @map("created_at")
  updatedAt               DateTime       @updatedAt @map("updated_at")

  @@map("inventory_batches")
}

model Purchase {
  purchaseId        String          @id @default(uuid()) @map("purchase_id")
  date              DateTime        @db.Date
  supplierId        String          @map("supplier_id")
  journalId         String          @map("journal_id")
  invoiceNumber     String          @db.VarChar(50) @map("invoice_number")
  paymentType       PaymentType     @map("payment_type")
  subtotal          Decimal         @db.Decimal(15, 2)
  vat               Decimal         @db.Decimal(15, 2)
  total             Decimal         @db.Decimal(15, 2)

  supplier          Supplier        @relation(fields: [supplierId], references: [supplierId], onDelete: Restrict)
  journal           Journal         @relation(fields: [journalId], references: [journalId], onDelete: Cascade)
  purchaseDetails   PurchaseDetail[]
  payable           Payable?       
  purchaseReturns   PurchaseReturn[]

  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("purchases")
}

model PurchaseDetail {
  purchaseDetailId        String           @id @default(uuid()) @map("purchase_detail_id")
  purchaseId              String           @map("purchase_id")
  productId               String           @map("product_id")
  quantity                Int
  unitPrice               Decimal          @db.Decimal(15, 2) @map("unit_price")
  subtotal                Decimal          @db.Decimal(15, 2)

  purchase                Purchase         @relation(fields: [purchaseId], references: [purchaseId], onDelete: Cascade)
  product                 Product          @relation(fields: [productId], references: [productId], onDelete: Restrict)
  inventoryBatch          InventoryBatch?  @relation("PurchaseDetailToInventoryBatch")
  purchaseReturnDetails   PurchaseReturnDetail[] 

  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  @@map("purchase_details")
}

model Payable {
  payableId       String        @id @default(uuid()) @map("payable_id")
  journalEntryId  String        @unique @map("journal_entry_id")
  purchaseId      String?       @unique @map("purchase_id")
  supplierId      String        @map("supplier_id")
  amount          Decimal       @db.Decimal(15, 2)
  paidAmount      Decimal       @default(0.00) @db.Decimal(15, 2) @map("paid_amount")
  remainingAmount Decimal       @default(0.00) @db.Decimal(15, 2) @map("remaining_amount")
  dueDate         DateTime      @db.Date @map("due_date")
  status          PaymentStatus
  payments        Payment[]

  journalEntry    JournalEntry  @relation(fields: [journalEntryId], references: [journalEntryId], onDelete: Restrict)
  supplier        Supplier      @relation(fields: [supplierId], references: [supplierId], onDelete: Restrict)
  purchase        Purchase?     @relation(fields: [purchaseId], references: [purchaseId], onDelete: Cascade)

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("payables")
}

model Payment {
  paymentId       String        @id @default(uuid()) @map("payment_id")
  paymentVoucher  String?        @default("TEMP-BKK") @db.VarChar(50) @map("payment_voucher")
  payableId       String        @map("payable_id")
  journalEntryId  String        @unique @map("journal_entry_id")
  amount          Decimal       @db.Decimal(15, 2)
  paymentDate     DateTime      @db.Date @map("payment_date")
  method          PaymentMethod

  payable         Payable       @relation(fields: [payableId], references: [payableId], onDelete: Cascade)
  journalEntry    JournalEntry  @relation("PaymentJournalEntry", fields: [journalEntryId], references: [journalEntryId], onDelete: Restrict)

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("payments")
}

model PurchaseReturn {
  returnId           String    @id @default(uuid()) @map("return_id")
  journalId         String          @map("journal_id")
  purchaseId         String    @map("purchase_id")
  supplierId         String    @map("supplier_id")
  returnDate         DateTime  @default(now()) @map("return_date")
  reason             String?   @db.Text

  subtotal           Decimal   @db.Decimal(15, 2)
  vat                Decimal   @db.Decimal(15, 2)
  total              Decimal   @db.Decimal(15, 2)
  status             ReturnStatus @default(PENDING)

  journal            Journal   @relation(fields: [journalId], references: [journalId], onDelete: Cascade)
  purchase           Purchase  @relation(fields: [purchaseId], references: [purchaseId])
  supplier           Supplier  @relation(fields: [supplierId], references: [supplierId])
  returnDetails      PurchaseReturnDetail[]

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  @@map("purchase_returns")
}

model PurchaseReturnDetail {
  returnDetailId     String  @id @default(uuid()) @map("return_detail_id")
  returnId           String  @map("return_id")
  purchaseDetailId   String  @map("purchase_detail_id")
  batchId            String  @map("batch_id")
  productId          String  @map("item_id")

  qtyReturned        Int     @map("qty_returned")
  unitPrice          Decimal @db.Decimal(15, 2)
  
  returnValue        Decimal @db.Decimal(15, 2)
  vatAmount          Decimal @db.Decimal(15, 2)
  totalWithVat       Decimal @db.Decimal(15, 2)

  purchaseReturn     PurchaseReturn     @relation(fields: [returnId], references: [returnId])
  purchaseDetail     PurchaseDetail     @relation(fields: [purchaseDetailId], references: [purchaseDetailId])
  inventoryBatch     InventoryBatch     @relation(fields: [batchId], references: [batchId])
  product            Product            @relation(fields: [productId], references: [productId])

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@map("purchase_return_details")
}

model Sale {
  saleId        String        @id @default(uuid()) @map("sale_id")
  date          DateTime      @db.Date
  customerId    String        @map("customer_id")
  journalId     String        @map("journal_id") 
  invoiceNumber String        @unique @db.VarChar(50) @map("invoice_number")
  paymentType   PaymentType   @map("payment_type")
  subtotal      Decimal       @db.Decimal(15, 2)
  vat           Decimal       @db.Decimal(15, 2)
  total         Decimal       @db.Decimal(15, 2)

  customer      Customer     @relation(fields: [customerId], references: [customerId], onDelete: Restrict)
  journal       Journal      @relation(fields: [journalId], references: [journalId], onDelete: Cascade)
  saleDetails   SaleDetail[]
  receivable    Receivable?
  saleReturns   SaleReturn[]


  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("sales")
}

model SaleDetail {
  saleDetailId String           @id @default(uuid()) @map("sale_detail_id")
  saleId       String           @map("sale_id")
  productId    String           @map("product_id")
  batchId      String           @map("batch_id")
  quantity     Int
  unitPrice    Decimal          @db.Decimal(15, 2) @map("unit_price")
  subtotal     Decimal          @db.Decimal(15, 2)
  
  sale         Sale             @relation(fields: [saleId], references: [saleId], onDelete: Cascade)
  product      Product          @relation(fields: [productId], references: [productId], onDelete: Restrict)
  batch        InventoryBatch   @relation(fields: [batchId], references: [batchId], onDelete: Restrict)
  saleReturnDetails   SaleReturnDetail[] 


  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")

  @@map("sale_details")
}

model Receivable {
  receivableId   String         @id @default(uuid()) @map("receivable_id")
  journalEntryId String         @unique @map("journal_entry_id")
  saleId         String?        @unique @map("sale_id")
  customerId     String         @map("customer_id")
  amount         Decimal        @db.Decimal(15, 2)
  paidAmount      Decimal       @default(0.00) @db.Decimal(15, 2) @map("paid_amount")
  remainingAmount Decimal       @default(0.00) @db.Decimal(15, 2) @map("remaining_amount")
  dueDate        DateTime       @db.Date @map("due_date")
  status         PaymentStatus
  payments       ReceivablePayment[]

  journalEntry   JournalEntry   @relation(fields: [journalEntryId], references: [journalEntryId], onDelete: Restrict)
  customer       Customer       @relation(fields: [customerId], references: [customerId], onDelete: Restrict)
  sale           Sale?          @relation(fields: [saleId], references: [saleId], onDelete: Cascade)
  
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  @@map("receivables")
}

model ReceivablePayment {
  paymentId       String        @id @default(uuid()) @map("payment_id")
  receiveVoucher  String        @default("TEMP-BKM") @db.VarChar(50) @map("receive_voucher")
  receivableId    String        @map("receivable_id")
  journalEntryId  String        @unique @map("journal_entry_id")
  amount          Decimal       @db.Decimal(15, 2)
  paymentDate     DateTime      @db.Date @map("payment_date")
  method          PaymentMethod

  receivable      Receivable    @relation(fields: [receivableId], references: [receivableId], onDelete: Cascade)
  journalEntry    JournalEntry  @relation("ReceivablePaymentJournalEntry", fields: [journalEntryId], references: [journalEntryId], onDelete: Restrict)

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("receivable_payments")
}

model SaleReturn {
  returnId           String    @id @default(uuid()) @map("return_id")
  journalId          String          @map("journal_id")
  saleId             String    @map("sale_id")
  customerId         String    @map("customer_id")
  returnDate         DateTime  @default(now()) @map("return_date")
  reason             String?   @db.Text
  subtotal           Decimal   @db.Decimal(15, 2)
  vat                Decimal   @db.Decimal(15, 2)
  total              Decimal   @db.Decimal(15, 2)
  status             ReturnStatus @default(PENDING)

  journal            Journal   @relation(fields: [journalId], references: [journalId], onDelete: Cascade)
  sale               Sale      @relation(fields: [saleId], references: [saleId])
  customer           Customer  @relation(fields: [customerId], references: [customerId])
  returnDetails      SaleReturnDetail[]

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  @@map("sale_returns")
}

model SaleReturnDetail {
  returnDetailId     String  @id @default(uuid()) @map("return_detail_id")
  returnId           String  @map("return_id")
  saleDetailId       String  @map("sale_detail_id")
  batchId            String  @map("batch_id")
  itemId             String  @map("item_id")

  qtyReturned        Int     @map("qty_returned")
  unitPrice          Decimal @db.Decimal(15, 2)
  
  returnValue        Decimal @db.Decimal(15, 2)
  vatAmount          Decimal @db.Decimal(15, 2)
  totalWithVat       Decimal @db.Decimal(15, 2)

  saleReturn         SaleReturn         @relation(fields: [returnId], references: [returnId])
  saleDetail         SaleDetail         @relation(fields: [saleDetailId], references: [saleDetailId])
  inventoryBatch     InventoryBatch     @relation(fields: [batchId], references: [batchId])
  product            Product            @relation(fields: [itemId], references: [productId])

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@map("sale_return_details")
}

model GeneralSetting {
  id                String           @id @default(uuid())
  inventoryMethod   InventoryMethod  @default(AVG) @map("inventory_method")

  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  @@map("general_settings")
}

model VatSetting {
  vatId         String      @id @default(uuid()) @map("vat_id")
  vatRate       Decimal     @db.Decimal(5, 2) @map("vat_rate")
  effectiveDate DateTime    @db.Date @map("effective_date")

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")

  @@map("vat_settings")
}