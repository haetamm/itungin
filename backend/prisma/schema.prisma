// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  // url      = env("MYSQL_DATABASE_URL")
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum UserRoleEnum {
  ADMIN
}

model Role {
  id        String       @id @default(uuid())
  role      UserRoleEnum @unique
  roleUsers UserRole[]

  @@map("roles")
}

model User {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(100)
  username  String     @unique @db.VarChar(100)
  password  String     @db.VarChar(100)
  token     String?    @db.Text
  imageUrl  String?    @map("image_url")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  roleUser  UserRole[]

  @@map("users")
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  SALES
  PURCHASES
  EXPENSE
}

model Account {
  id            String      @id @default(uuid())
  code          String?     @db.VarChar(20)
  accountName   String      @db.VarChar(50) @map("account_name")
  accountType   AccountType @map("account_type")
  balance       Decimal     @default(0.00) @db.Decimal(15, 2)
  Entry         Entry[]

  @@map("accounts")
}

enum EntryType {
  DEBIT
  CREDIT
}

model Entry {
  id                  String      @id @default(uuid())
  accountId           String      @map("account_id")
  transactionDate     DateTime    @map("transaction_date")
  description         String?     @db.VarChar(255)
  amount              Decimal     @default(0.00) @db.Decimal(15, 2)
  entryType           EntryType   @map("entry_type")
  account             Account     @relation(fields: [accountId], references: [id])

  payables            Payable?
  receivables         Receivable?
  equity              Equity?
  expenses            Expense?

  @@map("entries")
}

model Supplier {
  id              String      @id @default(uuid())
  name            String      @db.VarChar(255)
  phone           String?     @db.VarChar(20)
  email           String?     @db.VarChar(100)
  address         String?     @db.VarChar(100)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")
  purchases       Purchase[]
  paybles         Payable[]

  @@map("supliers")
}

model Product {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(255)
  category        String?   @db.VarChar(100)
  stock           Int
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")
  purchaseDetails PurchaseDetail[]
  saleDetails     SaleDetail[]

  @@map("products")
}

model Purchase {
  id              String        @id @default(uuid())
  supplierId      String        @map("supplier_id")
  purchaseDate    DateTime
  totalAmount     Decimal       @db.Decimal(15, 2) @map("total_amount")
  status          PaymentStatus
  suppliers       Supplier?     @relation(fields: [supplierId], references: [id])
  purchaseDetail  PurchaseDetail[]

  @@map("purchases")
}

model PurchaseDetail {
  id              String   @id @default(uuid())
  purchaseId      String
  productId       String
  quantity        Int
  price           Decimal  @db.Decimal(15, 2)
  purchase        Purchase @relation(fields: [purchaseId], references: [id])
  product         Product  @relation(fields: [productId], references: [id])

  @@map("purchase_details")
}

model Payable {
  id          String        @id @default(uuid())
  entryId     String        @map("entry_id") @unique
  supplierId  String        @map("supplier_id")
  amount      Decimal       @db.Decimal(15, 2)
  due_date    DateTime
  status      PaymentStatus 
  entry       Entry         @relation(fields: [entryId], references: [id])
  supplier    Supplier      @relation(fields: [supplierId], references: [id])

  @@map("payables")
}

model Customer {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(100)
  phone       String?       @db.VarChar(15)
  address     String?       @db.VarChar(100)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  sale        Sale[]
  receivables Receivable[]

  @@map("customers")
}

model Sale {
  id            String        @id @default(uuid())
  customerId    String?       @map("customer_id")
  saleDate      DateTime      @map("sale_date")
  totalAmount   Decimal       @db.Decimal(15, 2)  @map("total_amount")
  status        PaymentStatus
  customer      Customer?     @relation(fields: [customerId], references: [id])
  SaleDetail    SaleDetail[]

  @@map("sales")
}

model SaleDetail {
  id              String  @id @default(uuid())
  saleId          String  @map("sale_id")
  productId       String  @map("product_id")
  quantity        Int
  price           Decimal @db.Decimal(15, 2)
  sale            Sale    @relation(fields: [saleId], references: [id])
  product         Product @relation(fields: [productId], references: [id])

  @@map("sale_details")
}

model Receivable {
  id          String        @id @default(uuid())
  entryId     String        @map("entry_id") @unique
  customerId  String        @map("customer_id")
  amount      Decimal       @db.Decimal(15, 2)
  dueDate     DateTime      @map("due_date")
  status      PaymentStatus
  entry       Entry         @relation(fields: [entryId], references: [id])
  customer    Customer      @relation(fields: [customerId], references: [id])

  @@map("receivables")
}

model Equity {
  id          String   @id @default(uuid())
  entryId     String   @unique  @map("entry_id") 
  amount      Decimal  @db.Decimal(15, 2)
  description String?  @db.VarChar(255)
  entry       Entry    @relation(fields: [entryId], references: [id])

  @@map("equity")
}

model Expense {
  id          String   @id @default(uuid())
  entryId     String   @unique  @map("entry_id")
  amount      Decimal  @db.Decimal(15, 2)
  description String?  @db.VarChar(255)
  entry       Entry    @relation(fields: [entryId], references: [id])

  @@map("expenses")
}
